#!/usr/bin/env bash
# @file software/official/radarr/radarr.sh
# @version 1.1.26
# @project MediaEase
# @description Radarr handler
# @author Thomas Chauveau (tomcdj71)
# @author_contact thomas.chauveau.pro@gmail.com
# @license BSD-3 Clause (Included in LICENSE)
# @copyright Copyright (C) 2025, MediaEase

# @function zen::software::radarr::add
# @alias Install Radarr
# @description Adds Radarr for a user, including downloading, configuring, and starting the service.
# @global app_name The name of the application (Radarr).
# @global config An associative array repreenting useful variables taken from the software config file
# @global user An associative array containing user-specific information.
# @note Disables SC2154 because the variable is defined in the main script.
# shellcheck disable=SC2154
# @example
#   zen software add radarr -u <username>
# @example
#   zen software add radarr -u <username> -o branch=beta # installs the beta (nightly) version
zen::software::radarr::add() {

	zen::git::get_release "/opt/${user[username]}/$app_name" "${config[github]}" "${software_options[is_prerelease]}" "${config[release_name]}"
	# configure the app. This will also generate the proxy file
	zen::software::radarr::config "${software_options[is_prerelease]}"
	# generate the service file, this will also start it
	zen::service::generate "$app_name" "${config[config_file]}"
	# create a backup file
	zen::software::backup::create "$app_name" "${config[config_file]}"
}

# @function zen::software::radarr::config
# @internal
# @description Configures Radarr for a user, including setting up configuration files and proxy settings.
# @global user An associative array containing user-specific information.
# @example
#   zen::software::radarr::config
zen::software::radarr::config() {
	declare -g url_base
	mflibs::shell::text::white "$(zen::i18n::translate "messages.software.configure" "$app_name")"
	zen::software::autogen
	url_base="/${user[username]}/${app_name}"
	[[ ${software_options[is_prerelease]} == "true" ]] && branch="develop" || branch="master"
	mkdir -p "/home/${user[username]}/.config/${app_name}"
	cat >"/home/${user[username]}/.config/${app_name}/config.xml" <<RCON
<Config>
	<BindAddress>127.0.0.1</BindAddress>
	<Port>${default_port}</Port>
	<UrlBase>${url_base}</UrlBase>
	<EnableSsl>False</EnableSsl>
	<SslPort>${ssl_port}</SslPort>
	<SslCertPath></SslCertPath>
	<SslCertPassword></SslCertPassword>
	<ApiKey>${apikey}</ApiKey>
	<LogLevel>Info</LogLevel>
	<AnalyticsEnabled>False</AnalyticsEnabled>
	<Branch>${branch}</Branch>
	<UpdateAutomatically>True</UpdateAutomatically>
	<UpdateMechanism>BuiltIn</UpdateMechanism>
	<LaunchBrowser>False</LaunchBrowser>
	<InstanceName>${config[app_name]}</InstanceName>
	<Theme>dark</Theme>
</Config>
RCON
	zen::permission::read_exec "/home/${user[username]}/.config/${app_name}" "${user[username]}"
	zen::permission::read_exec "/opt/${user[username]}/${app_name}" "${user[username]}"
	zen::permission::user_exec "/opt/${user[username]}/$app_name/${config[app_name]}" "${user[username]}"
	zen::proxy::generate "$app_name" "$default_port" "$url_base"
	mflibs::shell::text::green "$(zen::i18n::translate "success.software.configure" "$app_name")"
}

# @function zen::software::radarr::update
# @alias Update Radarr
# @description Updates Radarr for a user, including stopping the service, downloading the latest release, and restarting.
# @global user An associative array containing user-specific information.
# @global software_config_file Path to the software's configuration file.
# @example
#   zen software update radarr -u <username>
# @example
#   zen software update radarr -u <username> -o branch=beta # update to latest beta (nightly) version
zen::software::radarr::update() {
	local service_name
	[ "${config[is_multi]}" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
	zen::service::manage "stop" "$service_name"
	rm -rf "/opt/${user[username]}/$app_name"
	# grab the correct release
	zen::git::get_release "/opt/${user[username]}/$app_name" "${config[github]}" "${software_options[is_prerelease]}" "${config[release_name]}"
	zen::service::manage "start" "$service_name"
}

# @function zen::software::radarr::remove
# @alias Remove Radarr
# @description Removes Radarr for a user, including disabling and deleting the service and cleaning up files.
# @global user An associative array containing user-specific information.
# @example
#   zen software remove radarr -u <username>
zen::software::radarr::remove() {
	local service_name
	is_multi=$(zen::software::get_config_key_value "$software_config_file" '.arguments.multi_user')
	[ "$is_multi" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"

	zen::service::manage "disable" "$service_name"
	rm -f "$service_file"
	zen::proxy::remove "$app_name" "${user[username]}"
	rm -rf /opt/"${user[username]}"/"$app_name"
	rm -rf /home/"${user[username]}"/.config/"$app_name"
	rm -rf /home/"${user[username]}"/tmp/"$app_name"
}

# @function zen::software::radarr::backup
# @alias Backup Radarr
# @description Creates a backup for Radarr settings for a user.
# @note This function is currently a placeholder and needs implementation.
# @example
#   zen software backup radarr -u <username>
zen::software::radarr::backup() {
	local username="$1"
	local app_name="$2"
}

# @function zen::software::radarr::reset
# @alias Reset Radarr
# @description Resets Radarr settings for a user.
# @note This function is currently a placeholder and needs implementation.
# @example
#   zen software reset radarr -u <username>
zen::software::radarr::reset() {
	local username="$1"
	local app_name="$2"
}

# @function zen::software::radarr::reinstall
# @alias Reinstall Radarr
# @description Reinstalls Radarr for a user.
# @note This function is currently a placeholder and needs implementation.
# @example
#   zen software reinstall radarr -u <username>
zen::software::radarr::reinstall() {
	local username="$1"
	local app_name="$2"
}
