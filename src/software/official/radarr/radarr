#!/usr/bin/env bash
# @file software/official/radarr/radarr.sh
# @version 1.1.26
# @project MediaEase
# @description Radarr handler
# @author Thomas Chauveau (tomcdj71)
# @author_contact thomas.chauveau.pro@gmail.com
# @license BSD-3 Clause (Included in LICENSE)
# @copyright Copyright (C) 2025, MediaEase

# @function zen::software::radarr::add
# @alias Install Radarr
# @description Adds Radarr for a user, including downloading, configuring, and starting the service.
# @global app_name The name of the application (Radarr).
# @global config An associative array repreenting useful variables taken from the software config file
# @global user An associative array containing user-specific information.
# @note Disables SC2154 because the variable is defined in the main script.
# shellcheck disable=SC2154
# @example
#   zen software add radarr -u <username>
# @example
#   zen software add radarr -u <username> -o branch=beta # installs the beta (nightly) version
zen::software::radarr::add() {
	zen::git::get_release "/opt/${user[username]}/$app_name" "${config[github]}" "${software_options[is_prerelease]}" "${config[release_name]}"
	# configure the app. This will also generate the proxy file
	zen::software::radarr::config
	# generate the service file, this will also start it
	zen::service::generate "$app_name" false true
	# Set up the authentication method (required for Radarr)
	zen::software::radarr::secure
	# create a backup file
	zen::software::radarr::backup "$app_name" "base"
}

# @function zen::software::radarr::config
# @internal
# @description Configures Radarr for a user, including setting up configuration files and proxy settings.
# @global user An associative array containing user-specific information.
# @example
#   zen::software::radarr::config
zen::software::radarr::config() {
	declare -g url_base
	mflibs::shell::text::white "$(zen::i18n::translate "messages.software.configure" "$app_name")"
	zen::software::autogen
	url_base="/${user[username]}/${app_name}"
	[[ ${software_options[is_prerelease]} == "true" ]] && branch="develop" || branch="master"
	mkdir -p "/home/${user[username]}/.config/${app_name}"
	cat >"/home/${user[username]}/.config/${app_name}/config.xml" <<RCON
<Config>
	<BindAddress>127.0.0.1</BindAddress>
	<Port>${default_port}</Port>
	<UrlBase>${url_base}</UrlBase>
	<EnableSsl>False</EnableSsl>
	<SslPort>${ssl_port}</SslPort>
	<SslCertPath></SslCertPath>
	<SslCertPassword></SslCertPassword>
	<ApiKey>${apikey}</ApiKey>
	<LogLevel>Info</LogLevel>
	<AnalyticsEnabled>False</AnalyticsEnabled>
	<Branch>${branch}</Branch>
	<UpdateAutomatically>True</UpdateAutomatically>
	<UpdateMechanism>BuiltIn</UpdateMechanism>
	<LaunchBrowser>False</LaunchBrowser>
	<InstanceName>${config[app_name]}</InstanceName>
	<Theme>dark</Theme>
</Config>
RCON
	zen::permission::read_exec "/home/${user[username]}/.config/${app_name}" "${user[username]}"
	zen::proxy::generate "$app_name" "$default_port" "$url_base"
	mflibs::shell::text::green "$(zen::i18n::translate "success.software.configure" "$app_name")"
}

# @function zen::software::radarr::update
# @alias Update Radarr
# @description Updates Radarr for a user, including stopping the service, downloading the latest release, and restarting.
# @global user An associative array containing user-specific information.
# @global software_config_file Path to the software's configuration file.
# @example
#   zen software update radarr -u <username>
# @example
#   zen software update radarr -u <username> -o branch=beta # update to latest beta (nightly) version
zen::software::radarr::update() {
	local service_name
	[ "${config[is_multi]}" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
	zen::software::radarr::read_config
	current_conf[version]="v$(zen::software::get_version "$app_name")"
	zen::git::prerelease_check "${config[github]}" "${current_conf[version]}"
	zen::service::manage "stop" "$service_name"
	zen::git::get_release "/opt/${user[username]}/$app_name" "${config[github]}" "$is_prerelease" "${config[release_name]}"
	if [ $? -eq 2 ]; then
		zen::service::manage "restart" "$service_name"
		return 1
	fi
	zen::permission::read_exec "/home/${user[username]}/.config/${app_name}" "${user[username]}"
	zen::software::radarr::backup "$app_name" "manual"
	sleep 2
	zen::service::manage "restart" "$service_name"
}

# @function zen::software::radarr::remove
# @alias Remove Radarr
# @description Removes Radarr for a user, including disabling and deleting the service and cleaning up files.
# @global user An associative array containing user-specific information.
# @example
#   zen software remove radarr -u <username>
zen::software::radarr::remove() {
	local service_name
	[ "${config[is_multi]}" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
	zen::service::manage "stop" "$service_name"
	zen::service::manage "disable" "$service_name"
	zen::software::remove "$app_name"
	zen::database::delete "service" "name = '${service_name}'"
}

# @function zen::software::radarr::backup
# @alias Backup Radarr
# @description Creates a backup for Radarr settings for a user.
# @note This function is currently a placeholder and needs implementation.
# @example
#   zen software backup radarr -u <username>
zen::software::radarr::backup() {
	local app_name="$1"
	[ -z "$2" ] && backup_context="user" || backup_context="$2"
	zen::software::backup::create "$app_name" "${backup_context}"
}

# @function zen::software::radarr::reset
# @alias Reset Radarr
# @description Resets Radarr settings for a user.
# @note This function is currently a placeholder and needs implementation.
# @example
#   zen software reset radarr -u <username>
zen::software::radarr::reset() {
	zen::software::reset "$app_name"
}

# @function zen::software::radarr::reinstall
# @alias Reinstall Radarr
# @description Reinstalls Radarr for a user.
# @example
#   zen software reinstall radarr -u <username>
zen::software::radarr::reinstall() {
	zen::software::radarr::read_config "update"
	zen::software::radarr::remove
	zen::software::radarr::add
}

# @function zen::software::radarr::read_config
# @internal
# @description Reads the Radarr configuration file and sets the variables.
# @global current_conf An associative array containing the current configuration.
# @example
#   zen::software::radarr::read_config
# shellcheck disable=SC2034
zen::software::radarr::read_config() {
	declare -A -g current_conf api_service
    while IFS= read -r line; do
        case "$line" in
            *"<ApiKey>"*)
                apikey=$(echo "$line" | sed -E 's/<[^>]+>//g' | tr -d '[:space:]')
                ;;
            *"<Port>"*)
                default_port=$(echo "$line" | sed -E 's/<[^>]+>//g' | tr -d '[:space:]')
                ;;
            *"<SslPort>"*)
                ssl_port=$(echo "$line" | sed -E 's/<[^>]+>//g' | tr -d '[:space:]')
                ;;
            *"<UrlBase>"*)
                url_base=$(echo "$line" | sed -E 's/<[^>]+>//g' | tr -d '[:space:]')
                ;;
        esac
    done < <(grep -E "<ApiKey>|<Port>|<SslPort>|<UrlBase>" "/home/${user[username]}/.config/${app_name}/config.xml")
	current_conf[default_port]="$default_port"
	current_conf[ssl_port]="$ssl_port"
	current_conf[apikey]="$apikey"
	current_conf[root_url]="$url_base"
	api_service=(
		[default_port]="${current_conf[default_port]}"
		[ssl_port]="${current_conf[ssl_port]}"
		[apikey]="${current_conf[apikey]}"
		[root_url]="${current_conf[root_url]}"
	)
}

# @function zen::software::radarr::secure
# @internal
# @description Secures Radarr for a user, including setting up configuration files and proxy settings.
# @global user An associative array containing user-specific information.
# @example
#   zen::software::radarr::secure
zen::software::radarr::secure() {
	mflibs::shell::text::white "$(zen::i18n::translate "messages.software.secure" "$app_name")"
	json_payload=$(jq -n --arg bindAddress "127.0.0.1" --argjson port "${api_service[default_port]:-0}" --argjson sslPort "${api_service[ssl_port]:-0}" --argjson enableSsl false --argjson launchBrowser false --arg authenticationMethod "forms" --arg authenticationRequired "enabled" --argjson analyticsEnabled false --arg username "${user[username]}" --arg password "${user[password]}" --arg passwordConfirmation "${user[password]}" --arg logLevel "info" --argjson logSizeLimit 1 --arg consoleLogLevel "" --arg branch "${branch}" --arg apiKey "${api_service[apikey]}" --arg sslCertPath "" --arg sslCertPassword "" --arg urlBase "${api_service[root_url]}" --arg instanceName "${config[app_name]}" --arg applicationUrl "" --argjson updateAutomatically true --arg updateMechanism "builtIn" --arg updateScriptPath "" --argjson proxyEnabled false --arg proxyType "http" --arg proxyHostname "" --argjson proxyPort 8080 --arg proxyUsername "" --arg proxyPassword "" --arg proxyBypassFilter "" --argjson proxyBypassLocalAddresses true --arg certificateValidation "enabled" --arg backupFolder "Backups" --argjson backupInterval 7 --argjson backupRetention 28 --argjson trustCgnatIpAddresses false --argjson id 1 '{bindAddress:$bindAddress,port:$port,sslPort:$sslPort,enableSsl:$enableSsl,launchBrowser:$launchBrowser,authenticationMethod:$authenticationMethod,authenticationRequired:$authenticationRequired,analyticsEnabled:$analyticsEnabled,username:$username,password:$password,passwordConfirmation:$passwordConfirmation,logLevel:$logLevel,logSizeLimit:$logSizeLimit,consoleLogLevel:$consoleLogLevel,branch:$branch,apiKey:$apiKey,sslCertPath:$sslCertPath,sslCertPassword:$sslCertPassword,urlBase:$urlBase,instanceName:$instanceName,applicationUrl:$applicationUrl,updateAutomatically:$updateAutomatically,updateMechanism:$updateMechanism,updateScriptPath:$updateScriptPath,proxyEnabled:$proxyEnabled,proxyType:$proxyType,proxyHostname:$proxyHostname,proxyPort:$proxyPort,proxyUsername:$proxyUsername,proxyPassword:$proxyPassword,proxyBypassFilter:$proxyBypassFilter,proxyBypassLocalAddresses:$proxyBypassLocalAddresses,certificateValidation:$certificateValidation,backupFolder:$backupFolder,backupInterval:$backupInterval,backupRetention:$backupRetention,trustCgnatIpAddresses:$trustCgnatIpAddresses,id:$id}')
	url="http://127.0.0.1:${api_service[default_port]:-0}/${user[username]}/${config[altname]}/api/v3/config/host"
	cd /srv/harmonyui && mflibs::log "su -c \"symfony console harmony:beautify:xml /home/${user[username]}/.config/${app_name}/config.xml\" \"${user[username]}\""
	zen::request::app_request_save "${url}" "PUT" "${json_payload}"
}
