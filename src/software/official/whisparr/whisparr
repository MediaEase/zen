#!/usr/bin/env bash
# @file software/official/whisparr/whisparr.sh
# @version 1.1.5
# @project MediaEase
# @description Whisparr handler
# @author Thomas Chauveau (tomcdj71)
# @author_contact thomas.chauveau.pro@gmail.com
# @license BSD-3 Clause (Included in LICENSE)
# @copyright Copyright (C) 2025, MediaEase

# @function zen::software::whisparr::add
# @description Adds a Whisparr for a user, including downloading, configuring, and starting the service.
# @arg $1 string The name of the application (Whisparr).
# @arg $2 string A sanitized version of the application name for display.
# @global software_config_file Path to the software's configuration file.
# @global user An associative array containing user-specific information.
# @note Disables SC2154 because the variable is defined in the main script.
# shellcheck disable=SC2154
zen::software::whisparr::add() {
    is_prerelease="false"
    mkdir -p "/tmp/$app_name"
    mflibs::file::mkcd "/opt/${user[username]}/$app_name"
    mflibs::log "wget --content-disposition 'http://whisparr.servarr.com/v1/update/nightly/updatefile?os=linux&runtime=netcore&arch=x64'"
    file_name=$(ls)
    mflibs::file::extract "$file_name"
    rm -rf "$file_name"
    # configure the app. This will also generate the proxy file
    zen::software::whisparr::config "$is_prerelease"
    # generate the service file, this will also start it
    zen::service::generate "$app_name" "$software_config_file"
    # create a backup file
    zen::software::backup::create "$app_name" "$software_config_file"
}

################################################################################
# @function zen::software::whisparr::config
# @description Configures Whisparr for a user, including setting up configuration files and proxy settings.
# @arg $1 string Indicates whether to use a prerelease version of Whisparr.
# @global user An associative array containing user-specific information.
# @example
#   # the following disables pre-release (develop):
#   zen::software::whisparr::config "false"
#   # the following enables pre-release (nightly):
#   zen::software::whisparr::config "true"
zen::software::whisparr::config() {
    local is_prerelease="$1"
    declare -g url_base
    mflibs::shell::text::white "$(zen::i18n::translate "messages.software.configure" "$app_name")"
    zen::software::autogen
    url_base="/${user[username]}/${app_name}"
    branch="develop"
    mkdir -p "/home/${user[username]}/.config/${app_name}"
    cat >"/home/${user[username]}/.config/${app_name}/config.xml" <<RCON
<Config>
	<BindAddress>127.0.0.1</BindAddress>
	<Port>${default_port}</Port>
	<UrlBase>${url_base}</UrlBase>
	<EnableSsl>False</EnableSsl>
	<SslPort>${ssl_port}</SslPort>
	<SslCertPath></SslCertPath>
	<SslCertPassword></SslCertPassword>
	<ApiKey>${apikey}</ApiKey>
	<LogLevel>Info</LogLevel>
	<AnalyticsEnabled>False</AnalyticsEnabled>
	<Branch>${branch}</Branch>
	<UpdateAutomatically>True</UpdateAutomatically>
	<UpdateMechanism>BuiltIn</UpdateMechanism>
	<LaunchBrowser>False</LaunchBrowser>
	<InstanceName>${config[altname]}</InstanceName>
	<Theme>dark</Theme>
</Config>
RCON

    # generate the proxy configuration
    zen::permission::read_exec "/home/${user[username]}/.config/${app_name}" "${user[username]}"
    zen::permission::read_exec "/opt/${user[username]}/${app_name}" "${user[username]}"
    zen::permission::user_exec "/opt/${user[username]}/$app_name/Whisparr" "${user[username]}"
    zen::proxy::generate "$app_name" "$default_port" "$url_base"
    mflibs::shell::text::green "$(zen::i18n::translate "success.software.configure" "$app_name")"
}

# @function zen::software::whisparr::update
# @description Updates Whisparr for a user, including stopping the service, downloading the latest release, and restarting.
# @global user An associative array containing user-specific information.
# @global software_config_file Path to the software's configuration file.
zen::software::whisparr::update() {
    local service_name
    is_multi=$(zen::software::get_config_key_value "$software_config_file" '.arguments.multi_user')
    [ "$is_multi" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"
    zen::service::manage "stop" "$service_name"
    rm -rf "/opt/${user[username]}/$app_name"
    is_prerelease="false"
    [[ "$software_branch" == "beta" ]] && is_prerelease="true"
    # grab the correct release
    mflibs::file::mkcd "/opt/${user[username]}/$app_name"
    mflibs::log "wget --content-disposition 'http://whisparr.servarr.com/v1/update/nightly/updatefile?os=linux&runtime=netcore&arch=x64'"
    file_name=$(ls)
    mflibs::file::extract "$file_name"
    rm -rf "$file_name"
    zen::service::manage "start" "$service_name"
}

# @function zen::software::whisparr::remove
# @description Removes Whisparr for a user, including disabling and deleting the service and cleaning up files.
# @global user An associative array containing user-specific information.
zen::software::whisparr::remove() {
    local service_name
    is_multi=$(zen::software::get_config_key_value "$software_config_file" '.arguments.multi_user')
    [ "$is_multi" == "true" ] && service_name="$app_name@${user[username]}.service" || service_name="$app_name.service"

    zen::service::manage "disable" "$service_name"
    rm -f "$service_file"
    zen::proxy::remove "$app_name" "${user[username]}"
    rm -rf /opt/"${user[username]}"/"$app_name"
    rm -rf /home/"${user[username]}"/.config/"$app_name"
    rm -rf /home/"${user[username]}"/tmp/"$app_name"
}

# @function zen::software::whisparr::backup
# @description Creates a backup for Whisparr settings for a user.
# @note This function is currently a placeholder and needs implementation.
zen::software::whisparr::backup() {
    local username="$1"
    local app_name="$2"
}

# @function zen::software::whisparr::reset
# @description Resets Whisparr settings for a user.
# @note This function is currently a placeholder and needs implementation.
zen::software::whisparr::reset() {
    local username="$1"
    local app_name="$2"
}

# @function zen::software::whisparr::reinstall
# @description Reinstalls Whisparr for a user.
# @note This function is currently a placeholder and needs implementation.
zen::software::whisparr::reinstall() {
    local username="$1"
    local app_name="$2"
}
